/**
 * Test script to demonstrate the new agentic mindmap workflow
 */

const { MindmapAgent } = require('./server/agents/mindmap-agent.js');

// Mock configuration
const config = {
  workspaceRoot: '/tmp',
  llmConfig: {
    type: 'local',
    baseURL: 'http://localhost:11434/v1',
    model: 'llama3.2',
  },
  customRole: 'Test mindmap agent',
  maxTokens: 4000,
};

async function demonstrateAgenticWorkflow() {
  console.log('🚀 Testing Agentic Mindmap Workflow');

  const agent = new MindmapAgent(config);

  // Mock mindmap context
  const mockMindmapData = {
    root: {
      id: 'root',
      text: 'My Knowledge Base',
      children: [
        {
          id: 'tech-node',
          text: 'Technology',
          children: [],
          notes: null,
          sources: [],
          position: { x: 0, y: 0 },
        },
      ],
      layout: 'tree',
      position: { x: 0, y: 0 },
      notes: null,
      sources: [],
    },
  };

  // Set up mindmap context
  agent.currentMindmapContext = {
    mindMapId: 'test-map',
    mindMapData: mockMindmapData,
  };

  // Test query that should be decomposed into multiple tasks
  const testQuery =
    'Add information about machine learning including supervised learning, unsupervised learning, and deep learning. Include examples and code snippets for each type.';

  console.log('📝 Test Query:', testQuery);
  console.log('---');

  // Mock the sendMessage method to avoid actual LLM calls
  agent.sendMessage = async prompt => {
    console.log('🔄 LLM Call with prompt length:', prompt.length);

    if (prompt.includes('task decomposition expert')) {
      // Mock task decomposition response
      return JSON.stringify([
        {
          type: 'create',
          description: 'Add main topic node for machine learning',
          priority: 'high',
          parentId: 'tech-node',
          details: {
            content: 'machine learning',
            focus: 'main topic with overview',
          },
        },
        {
          type: 'create',
          description: 'Add supervised learning subtopic with examples',
          priority: 'medium',
          parentId: 'machine-learning-node',
          details: {
            content: 'supervised learning',
            focus: 'examples and code',
          },
        },
        {
          type: 'create',
          description: 'Add unsupervised learning subtopic with examples',
          priority: 'medium',
          parentId: 'machine-learning-node',
          details: {
            content: 'unsupervised learning',
            focus: 'examples and code',
          },
        },
        {
          type: 'create',
          description:
            'Add deep learning subtopic with neural network examples',
          priority: 'medium',
          parentId: 'machine-learning-node',
          details: {
            content: 'deep learning',
            focus: 'neural networks and examples',
          },
        },
      ]);
    } else {
      // Mock individual task execution
      return JSON.stringify({
        changes: [
          {
            action: 'create',
            nodeId: '[[GENERATE_NODE_ID]]',
            parentId: 'tech-node',
            text: 'Machine Learning',
            notes:
              '## Machine Learning Overview\\n\\nMachine learning is a subset of artificial intelligence that enables computers to learn and make decisions from data.\\n\\n### Key Concepts\\n- **Training Data**: Historical data used to train models\\n- **Algorithms**: Mathematical procedures that find patterns\\n- **Predictions**: Outputs generated by trained models\\n\\n```python\\n# Simple example\\nfrom sklearn.linear_model import LinearRegression\\nmodel = LinearRegression()\\nmodel.fit(X_train, y_train)\\n```',
            sources: [],
          },
        ],
      });
    }
  };

  // Track progress updates
  const progressUpdates = [];
  const onUpdate = update => {
    progressUpdates.push(update);
    console.log(
      '📊 Progress Update:',
      update.type,
      '-',
      update.data.message || update.data.description
    );

    if (update.type === 'progress_update' && update.data.tasks) {
      console.log('📋 TODO List:');
      update.data.tasks.forEach((task, i) => {
        const status =
          task.status === 'todo'
            ? '⏳'
            : task.status === 'in-progress'
              ? '🔄'
              : '✅';
        console.log(
          `  ${i + 1}. ${status} ${task.description} (${task.priority})`
        );
      });
      console.log('---');
    }
  };

  try {
    // Execute the agentic workflow
    const result = await agent.processMessageAgentic(
      testQuery,
      [],
      [],
      onUpdate
    );

    console.log('✅ Workflow completed successfully!');
    console.log('📈 Final Results:');

    const parsed = JSON.parse(result.content);
    console.log(`- Total changes made: ${parsed.changes.length}`);
    console.log(
      `- Tasks completed: ${parsed.workflow.tasksCompleted}/${parsed.workflow.totalTasks}`
    );
    console.log(`- Tasks failed: ${parsed.workflow.tasksFailed}`);

    console.log('\n🎯 Progress Updates Received:', progressUpdates.length);
  } catch (error) {
    console.error('❌ Workflow failed:', error.message);
  }
}

// Run the demonstration
demonstrateAgenticWorkflow().catch(console.error);
