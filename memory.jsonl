{"type":"entity","name":"MindStrike Code Formatting","entityType":"Development Process","observations":["Always use 'npm run format' to fix formatting issues instead of running prettier directly","The project has a format script defined in package.json that should be used for consistency","Running 'npm run format' will format all files according to project standards"]}
{"type":"entity","name":"MindStrike Quality Check ESLint Disable Detection","entityType":"Code Quality Feature","observations":["The quality-check.js hook now detects ESLint disable comments and blocks code with them","ESLint disable comments should only be used when absolutely necessary with proper documentation","The quality check itself is excluded from this check to avoid recursive issues","This prevents LLMs from hacking around linting issues instead of fixing them properly","The check looks for patterns like eslint-disable-next-line, eslint-disable-line, eslint-disable, and eslint-enable"]}
{"type":"entity","name":"Vitest React Testing","entityType":"Testing Strategy","observations":["Act warnings in React tests are caused by state updates happening outside of act() wrapper","Promise.catch() handlers cause act warnings when they execute after test completes","Async operations in useEffect hooks need careful handling to avoid act warnings","Removing error handlers (.catch) can eliminate act warnings but may hide real errors","Mock only external dependencies rather than internal hooks for better test reliability","Act warnings occur with ANY state update that triggers React re-renders, not just async operations","Zustand store updates cause act warnings even for synchronous operations","When testing React hooks that use Zustand, operations must be wrapped in act()","Alternative: Test business logic without React hooks to avoid act warnings entirely","The root cause of act warnings is React component updates, not the timing of operations"]}
{"type":"entity","name":"useMindMaps Hook Testing","entityType":"Test Implementation","observations":["Successfully refactored from monolithic hook to composed smaller hooks","Removed React.startTransition to simplify testing","Made createMindMap synchronous to avoid act warnings","17 out of 22 tests passing after refactoring","Remaining issues are act warnings from initial data loading"]}
{"type":"entity","name":"MindStrike Test Commands","entityType":"TestingConfiguration","observations":["npm run test:ui - Runs Playwright e2e tests only","npm run test:client - Runs unit and integration tests for frontend/client code","npm run test:server - Runs server-side tests","npm run test:integration - Runs integration tests specifically","npm run test:e2e - Runs e2e tests with server start","test:client uses vitest.config.frontend.ts configuration"]}
{"type":"entity","name":"Extended Perplexity Chat Model","entityType":"Component","observations":["Located at server/modules/agents/services/chat-perplexity-extended.ts","Extends ChatPerplexity from @langchain/community to support multimodal content","Handles image attachments through structured content arrays","Converts BaseMessage types to PerplexityMessage format with role mapping","Overrides _generate method to properly handle multimodal messages","Uses typed PerplexityClient interface for type safety","Includes error logging through NestJS Logger","Returns ChatResult with AIMessage containing citations in additional_kwargs"]}
{"type":"entity","name":"Zustand Message Storage","entityType":"Architecture Pattern","observations":["Uses two main stores: useThreadsStore for thread metadata and useChatThreadStore for message content","useThreadsStore manages thread list, active thread selection, and thread CRUD operations","useChatThreadStore is a factory pattern creating per-thread stores with isolated message state","Thread stores are registered in a Map<string, Store> for dynamic thread management","Each thread store contains messages array, loading states, and message CRUD methods","Stores use subscribeWithSelector middleware for reactive updates","Messages stored with full typing: id, role, content, timestamp, status, model, toolCalls, etc.","Store state persists to server via API calls, not local storage"]}
{"type":"entity","name":"Message Persistence System","entityType":"System","observations":["Dual routing system: Express.js (legacy) and NestJS (replacement) both operational","Express routes at /api/threads/* in server/index.ts handle thread operations","NestJS ThreadsController at server/modules/agents/threads.controller.ts mirrors Express routes","Both use ConversationManager (Express) or ConversationService (NestJS) for backend persistence","Messages saved to mindstrike-chats.json file in workspace root","File format: Array of Thread objects containing messages arrays","ConversationService uses singleton pattern with in-memory cache Map<string, Thread>","Save operations are serialized to prevent concurrent file writes using savePromise queue","Load operation reads from file once and caches in memory with isLoaded flag"]}
{"type":"entity","name":"SSE Real-time Updates","entityType":"Communication Pattern","observations":["Single EventSource connection managed by SSEEventBus singleton","Topic-based event routing with typed SSEEvent interface","Event types: content-chunk, message-update, completed, cancelled, messages-deleted","Automatic reconnection with exponential backoff on connection loss","Page visibility handling to reconnect when tab becomes visible","Event bus broadcasts to all subscribers of specific event types","Wildcard subscription support for monitoring all events","Large content chunking handled through sseDecoder utility","Thread-specific filtering in useChat hook to process only relevant events"]}
{"type":"entity","name":"Message Flow Architecture","entityType":"Data Flow","observations":["User sends message via useChat hook sendMessage function","User message immediately added to Zustand store for optimistic UI","POST request to /api/message endpoint with message content and metadata","Server processes with LLM and starts streaming response","SSE events broadcast content-chunk for real-time character streaming","message-update events update assistant message with proper server ID","completed event marks message as finished and triggers title generation","ConversationService persists all messages to JSON file on each update","Zustand stores sync with SSE events for UI reactivity"]}
{"type":"entity","name":"ConversationService","entityType":"Service","observations":["NestJS service at server/modules/chat/services/conversation.service.ts","Manages thread and message persistence for NestJS routes","Uses GlobalConfigService for workspace root configuration","Implements atomic save operations with promise queue","Provides getThreadList, createThread, deleteThread, renameThread methods","Handles message CRUD: addMessage, updateMessage, deleteMessage","Checks for duplicate messages by ID before adding","Updates thread.updatedAt timestamp on any modification","Supports bulk message deletion across threads"]}
{"type":"entity","name":"ConversationManager","entityType":"Service","observations":["Express.js service at server/conversationManager.ts","Legacy implementation being replaced by ConversationService","Direct file system access to mindstrike-chats.json","Similar API to ConversationService for compatibility","Used by Express routes in server/index.ts","Implements same persistence patterns as NestJS version","Will likely be deprecated once NestJS migration complete"]}
{"type":"entity","name":"useChat Hook","entityType":"React Hook","observations":["Located at src/chat/hooks/useChat.ts","Primary interface for chat operations in React components","Manages SSE event subscriptions for real-time updates","Handles thread-specific message filtering","Implements optimistic UI updates for user messages","Triggers automatic thread title generation on first message","Supports image and notes attachments","Provides sendMessage, cancelMessage, deleteMessage functions","Tracks loading and streaming states per thread"]}
{"type":"entity","name":"Perplexity Citations Integration","entityType":"Feature Requirement","observations":["Documentation shows citations are available in Perplexity API responses","Citations arrive as array of URLs in response.citations field","In streaming mode, citations may appear in any chunk, usually complete by end","Inline markers [^1], [^2] etc. appear in content referencing citation array indices","Citation indices start from 1, matching array position","Current ChatPerplexityExtended stores citations in AIMessage.additional_kwargs","Citations not currently persisted in ConversationMessage interface","Need to add citations field to ConversationMessage type definition","Citations should be preserved through SSE streaming to frontend","Implementation requires adding citations?: string[] to all ConversationMessage interfaces","Citations need to flow through: Perplexity API → BaseAgent → SSE events → Frontend stores → JSON persistence","SSE event types need citation field added for message-update and completed events","useChat hook needs to handle citations in message updates","Zustand useChatThreadStore doesn't need changes as it uses ConversationMessage type","For streaming, need to accumulate citations array as chunks arrive","ChatPerplexityExtended needs streaming override to handle citations in SSE chunks","Citation display in UI would show inline [^1] markers with hoverable/clickable URLs"]}
{"type":"relation","from":"Vitest React Testing","to":"useMindMaps Hook Testing","relationType":"applies to"}
{"type":"relation","from":"useMindMaps Hook Testing","to":"MindStrike","relationType":"is part of"}
{"type":"relation","from":"Extended Perplexity Chat Model","to":"Message Persistence System","relationType":"processes messages for"}
{"type":"relation","from":"Zustand Message Storage","to":"Message Persistence System","relationType":"syncs with"}
{"type":"relation","from":"SSE Real-time Updates","to":"Zustand Message Storage","relationType":"updates"}
{"type":"relation","from":"Message Flow Architecture","to":"Zustand Message Storage","relationType":"orchestrates"}
{"type":"relation","from":"Message Flow Architecture","to":"SSE Real-time Updates","relationType":"uses"}
{"type":"relation","from":"Message Flow Architecture","to":"Message Persistence System","relationType":"persists through"}
{"type":"relation","from":"Message Persistence System","to":"Extended Perplexity Chat Model","relationType":"invokes"}
{"type":"relation","from":"SSE Real-time Updates","to":"Message Flow Architecture","relationType":"enables real-time in"}
{"type":"relation","from":"ConversationService","to":"Message Persistence System","relationType":"implements"}
{"type":"relation","from":"ConversationManager","to":"Message Persistence System","relationType":"implements"}
{"type":"relation","from":"useChat Hook","to":"Zustand Message Storage","relationType":"manages"}
{"type":"relation","from":"useChat Hook","to":"SSE Real-time Updates","relationType":"subscribes to"}
{"type":"relation","from":"useChat Hook","to":"Message Flow Architecture","relationType":"implements client side of"}
{"type":"relation","from":"Perplexity Citations Integration","to":"Extended Perplexity Chat Model","relationType":"requires modification of"}
{"type":"relation","from":"Perplexity Citations Integration","to":"ConversationService","relationType":"requires update to"}
{"type":"relation","from":"Perplexity Citations Integration","to":"ConversationManager","relationType":"requires update to"}
{"type":"relation","from":"Perplexity Citations Integration","to":"Message Persistence System","relationType":"adds citations to"}